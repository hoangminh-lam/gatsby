{"version":3,"sources":["webpack:///./src/pages/user-info/index.js"],"names":["UserInfoPage","img","data","nameRef","useRef","positionRef","explainRef","jwtRef","useEffect","jwt","window","sessionStorage","getItem","navigate","current","createUserInfo","a","user_name","value","position","user_explain","author","id","formData","FormData","append","JSON","stringify","fetch","method","headers","Authorization","body","then","r","json","location","reload","allStrapiUserInfo","edges","map","document","key","node","to","fixed","user_img","childImageSharp","explain","className","type","name","placeholder","ref","onChange","e","target","files","src","onClick","userInfoPageQuery"],"mappings":"qZA+FeA,UAxFM,SAAC,GAAc,IAK9BC,EALkBC,EAAW,EAAXA,KAChBC,EAAUC,mBACVC,EAAcD,mBACdE,EAAaF,mBACbG,EAASH,mBAGfI,qBAAU,WACR,IAAMC,EAAMC,OAAOC,eAAeC,QAAQ,OACrCH,GACHI,mBAAS,UAEXN,EAAOO,QAAUL,IAEhB,IAEH,IAIMM,EAAc,e,EAAA,G,EAAA,UAAG,sCAAAC,EAAA,6DACfC,EAAYd,EAAQW,QAAQI,MAC5BC,EAAWd,EAAYS,QAAQI,MAC/BE,EAAed,EAAWQ,QAAQI,MAClCG,EAASX,OAAOC,eAAeC,QAAQ,QAAQU,GAG/CC,EAAW,IAAIC,SACftB,EAAO,CACXe,YACAE,WACAC,eACAC,UAEFE,EAASE,OAAO,iBAAkBxB,EAAK,cACvCsB,EAASE,OAAO,OAAQC,KAAKC,UAAUzB,IAflB,UAiBf0B,MAvCO,qDAuCS,CACpBC,OAAQ,OACRC,QAAS,CACPC,cAAc,UAAWxB,EAAOO,SAElCkB,KAAMT,IACLU,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UAvBM,QAyBrBzB,OAAO0B,SAASC,SAzBK,2C,+KAAH,qDA8BpB,OACE,kBAAC,IAAD,KACE,sCACA,4BACGnC,EAAKoC,kBAAkBC,MAAMC,KAAI,SAAAC,GAAQ,OACxC,wBAAIC,IAAKD,EAASE,KAAKrB,IACrB,4BACE,kBAAC,OAAD,CAAMsB,GAAE,cAAgBH,EAASE,KAAKrB,IAAOmB,EAASE,KAAK1B,YAE7D,kBAAC,IAAD,CAAK4B,MAAOJ,EAASE,KAAKG,SAASC,gBAAgBF,QACnD,2BAAIJ,EAASE,KAAKK,cAIxB,yBAAKC,UAAU,aACb,2BACE,qCACA,2BAAOC,KAAK,OAAOC,KAAK,YAAYC,YAAY,KAAKC,IAAKlD,KAE5D,2BACE,qCACF,2BAAOmD,SAAU,SAAAC,GAtDrBtD,EAsDuCsD,EAtD3BC,OAAOC,MAAM,IAsDkBP,KAAK,OAAOC,KAAK,WAAWO,IAAI,MAEvE,2BACE,wCACF,2BAAOR,KAAK,OAAOC,KAAK,WAAWC,YAAY,WAAWC,IAAKhD,KAE/D,2BACE,uCACF,8BAAU+C,YAAY,OAAOD,KAAK,eAAeE,IAAK/C,KAEtD,4BAAQqD,QAAS,kBAAM5C,MAAvB,OAEF,2BAAG,kBAAC,OAAD,CAAM6B,GAAG,KAAT,eAOF,IAAMgB,EAAiB","file":"component---src-pages-user-info-index-js-2fa0d034dd091cbb68d1.js","sourcesContent":["import React, {useEffect, useState, useRef} from 'react'\nimport { Link, graphql, navigate } from 'gatsby'\nimport Img from 'gatsby-image'\nimport Layout from '../../components/layout'\n\nconst endpoint = 'https://lam-strapi-gatsby.herokuapp.com/user-infos'\n\nconst UserInfoPage = ({ data }) => {\n  const nameRef = useRef();\n  const positionRef = useRef();\n  const explainRef = useRef();\n  const jwtRef = useRef();\n  let img;\n\n  useEffect(() => {\n    const jwt = window.sessionStorage.getItem('jwt');\n    if (!jwt) {\n      navigate('/login')\n    }\n    jwtRef.current = jwt\n\n  }, []);\n\n  const handleChange = (event) => {\n    img = event.target.files[0]\n  }\n\n  const createUserInfo = async () => {\n    const user_name = nameRef.current.value;\n    const position = positionRef.current.value;\n    const user_explain = explainRef.current.value;\n    const author = window.sessionStorage.getItem('user').id\n    // console.log(user_img);\n\n    const formData = new FormData();\n    const data = {\n      user_name,\n      position,\n      user_explain,\n      author,\n    }\n    formData.append('files.user_img', img, 'images.jpg');\n    formData.append('data', JSON.stringify(data));\n\n    await fetch(endpoint, {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${jwtRef.current}`,\n      },\n      body: formData,\n    }).then(r => r.json());\n\n    window.location.reload();\n    // const newUserInfo = [...userInfos, res];\n    // setuserInfos(newUserInfo);\n  }\n\n  return (\n    <Layout>\n      <h1>ユーザー情報</h1>\n      <ul>\n        {data.allStrapiUserInfo.edges.map(document => (\n          <li key={document.node.id}>\n            <h2>\n              <Link to={`/user-info/${document.node.id}`}>{document.node.user_name}</Link>\n            </h2>\n            <Img fixed={document.node.user_img.childImageSharp.fixed}/>\n            <p>{document.node.explain}</p>\n          </li>\n        ))}\n      </ul>\n      <div className=\"userInput\">\n        <p>\n          <span>名前：</span>\n          <input type=\"text\" name=\"user_name\" placeholder=\"名前\" ref={nameRef} />\n        </p>\n        <p>\n          <span>画像：</span>\n        <input onChange={e => handleChange(e)} type=\"file\" name=\"user_img\" src=\"\"  />\n        </p>\n        <p>\n          <span>ポジション：</span>\n        <input type=\"text\" name=\"position\" placeholder=\"Position\" ref={positionRef} />\n        </p>\n        <p>\n          <span>自己紹介：</span>\n        <textarea placeholder=\"自己紹介\" name=\"user_explain\" ref={explainRef} />\n        </p>\n        <button onClick={() => createUserInfo()}>登録</button>\n      </div>\n      <p><Link to=\"/\">Top Page</Link></p>\n    </Layout>\n  )\n}\n\nexport default UserInfoPage\n\nexport const userInfoPageQuery = graphql`  \n  query UserInfoQuery {\n    allStrapiUserInfo {\n        edges {\n          node {\n            id\n            user_name\n            user_img {\n                childImageSharp {\n                    fixed(width: 200) {\n                      ...GatsbyImageSharpFixed\n                    }\n                }\n            }\n            user_explain\n          }\n        }\n    }\n  }\n`"],"sourceRoot":""}