{"version":3,"sources":["webpack:///./src/pages/project/index.js"],"names":["ProjectPage","user","userInfo","userID","data","jwtRef","useRef","useState","useEffect","jwt","window","sessionStorage","getItem","current","navigate","JSON","parse","userinfo","id","console","log","listID","list","lists","map","l","push","updateLike","postID","like","a","postIDs","split","likeList","listIDs","fetch","endpoint","method","headers","Authorization","body","stringify","likes","then","r","json","allStrapiProject","edges","document","key","node","to","name","fixed","logo","childImageSharp","className","onClick","projectPageQuery"],"mappings":"stCAyEeA,UAjEK,SAAC,GAAc,IAc7BC,EAAMC,EAAUC,EAdCC,EAAW,EAAXA,KACfC,EAASC,mBADiB,EAENC,oBAAS,GAFH,UAIhCC,qBAAU,WACR,IAAMC,EAAMC,OAAOC,eAAeC,QAAQ,OACrCH,EAILJ,EAAOQ,QAAUJ,EAHfK,SAAS,YAKV,IAGmB,oBAAXJ,SACTT,EAAOS,OAAOC,eAAeC,QAAQ,QACrCV,EAAWa,KAAKC,MAAMf,GACtBE,EAASD,EAASe,SAASC,GAC3BC,QAAQC,IAAIjB,IAGd,IAAMkB,EAAS,SAACC,GACd,IAAMC,EAAQ,GAGd,OAFAD,EAAKE,KAAI,SAAAC,GAAC,OAAIF,EAAMG,KAAKD,EAAEP,OAC3BC,QAAQC,IAAIE,GACLC,GAGHI,EAAU,e,EAAA,G,EAAA,UAAG,WAAOC,EAAQC,GAAf,mBAAAC,EAAA,6DACXC,EAAUH,EAAOI,MAAM,KAAK,GAC5BC,EAAWZ,EAAOQ,GAClBK,EAHW,YAGGD,GAHH,CAGa9B,IAC9BgB,QAAQC,IAAIc,GAJK,SAKCC,MAASC,oDAAYL,EAAW,CAChDM,OAAQ,MACRC,QAAS,CACPC,cAAc,UAAWlC,EAAOQ,QAChC,eAAgB,oBAElB2B,KAAMzB,KAAK0B,UAAU,CACnBC,MAAOR,MAERS,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UAdE,wD,+KAAH,wDAiBhB,OACE,kBAAC,IAAD,KACE,yCACA,4BACGzC,EAAK0C,iBAAiBC,MAAMvB,KAAI,SAAAwB,GAAQ,OACvC,wBAAIC,IAAKD,EAASE,KAAKhC,IACrB,4BACE,kBAAC,OAAD,CAAMiC,GAAE,YAAcH,EAASE,KAAKhC,IAAO8B,EAASE,KAAKE,OAE3D,kBAAC,IAAD,CAAKC,MAAOL,EAASE,KAAKI,KAAKC,gBAAgBF,QAE/C,uBAAGG,UAAU,cAAcC,QAAS,kBAAM9B,EAAWqB,EAASE,KAAKhC,GAAI8B,EAASE,KAAKR,SAArF,aAIN,2BAAG,kBAAC,OAAD,CAAMS,GAAG,KAAT,eAMF,IAAMO,EAAgB,c","file":"component---src-pages-project-index-js-c93a3021ef5903c8eb70.js","sourcesContent":["import React, {useEffect, useState, useRef} from 'react'\nimport { Link, graphql } from 'gatsby'\nimport Img from 'gatsby-image'\nimport Layout from '../../components/layout'\nimport '../../layout.scss'\n\nconst endpoint = 'https://lam-strapi-gatsby.herokuapp.com/projects'\n\nconst ProjectPage = ({ data }) => {\n  const jwtRef = useRef();\n  const [likes, setLikes] = useState(false)\n\n  useEffect(() => {\n    const jwt = window.sessionStorage.getItem('jwt');\n    if (!jwt) {\n      navigate('/login')\n      return\n    }\n    jwtRef.current = jwt\n\n  }, []);\n\n  let user, userInfo, userID\n  if (typeof window !== 'undefined') {\n    user = window.sessionStorage.getItem('user')\n    userInfo = JSON.parse(user)\n    userID = userInfo.userinfo.id\n    console.log(userID);\n  }\n\n  const listID = (list) => {\n    const lists = []\n    list.map(l => lists.push(l.id));\n    console.log(list)\n    return lists\n  }\n\n  const updateLike = async (postID, like) => {\n    const postIDs = postID.split('_')[1]\n    const likeList = listID(like)\n    const listIDs = [...likeList, userID]\n    console.log(listIDs)\n    const res = await fetch(`${endpoint}/${postIDs}`, {\n      method: 'PUT',\n      headers: {\n        Authorization: `Bearer ${jwtRef.current}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        likes: listIDs,\n      })\n    }).then(r => r.json());\n  }\n\n  return (\n    <Layout>\n      <h1>Project情報</h1>\n      <ul>\n        {data.allStrapiProject.edges.map(document => (\n          <li key={document.node.id}>\n            <h2>\n              <Link to={`/project/${document.node.id}`}>{document.node.name}</Link>\n            </h2>\n            <Img fixed={document.node.logo.childImageSharp.fixed}/>\n            {/* <p>{document.node.explain}</p> */}\n            <p className=\"button-like\" onClick={() => updateLike(document.node.id, document.node.likes)}>気になる</p>\n          </li>\n        ))}\n      </ul>\n      <p><Link to=\"/\">Top Page</Link></p>\n    </Layout>\n  )\n}\nexport default ProjectPage\n\nexport const projectPageQuery = graphql`  \n  query ProjectQuery {\n    allStrapiProject {\n      edges {\n        node {\n          id\n          name\n          logo {\n            childImageSharp {\n                fixed(width: 200) {\n                  ...GatsbyImageSharpFixed\n                }\n            }\n          }\n          likes {\n            id\n            user_name\n          }\n        }\n      }\n    }\n  }\n`"],"sourceRoot":""}